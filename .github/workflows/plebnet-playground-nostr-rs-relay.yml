name: plebnet-playground-nostr-rs-relay

# Controls when the action will run.
on:
  pull_request:
    branches:       #[ master ]
      - '*'         # matches every branch that doesn't contain a '/'
      - '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch
      - 'master'    # includes master
      - 'main'      # includes main
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    #paths:
    #  - '.github/workflows/automate.yml'
    #schedule:
    #  - cron: "*/5 * * * *"
    branches:       #[ master ]
      - '*'         # matches every branch that doesn't contain a '/'
      - '*/*'       # matches every branch containing a single '/'
      - '**'        # matches every branch
      - 'master'    # includes master
      - 'main'      # includes main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  github-workspace:
    name: github-workspace
    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: styfle/cancel-workflow-action@0.9.1
        if: ${{ !env.ACT }}
        with:
          access_token: ${{ github.token }}
      - name: Print github workspace
        run: |
          printenv

  latest-build_and_test:
    strategy:
      matrix:
        os: [ ubuntu-latest, ubuntu-22.04 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: styfle/cancel-workflow-action@0.9.1
        if: ${{ !env.ACT }}
        with:
          access_token: ${{ github.token }}
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: syphar/restore-virtualenv@v1
        id: cache-virtualenv
      - uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'

      - run: pip install -r requirements.txt
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'

      - name: make cargo-build/install
        run: |
          export RUSTUP_INIT_SKIP_PATH_CHECK=yes
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          #curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/rust-lang/rustup/master/rustup-init.sh | bash
          source "$HOME/.cargo/env" && cargo b
          #sudo apt install rustup-init
          #make cargo-build
          #make cargo-install
  macos-latest-cargo:
    strategy:
      matrix:
        os: [ macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: styfle/cancel-workflow-action@0.9.1
        if: ${{ !env.ACT }}
        with:
          access_token: ${{ github.token }}
      - uses: actions/checkout@v2
        if: ${{ !env.ACT }}
      - uses: actions/setup-python@v2
      - uses: syphar/restore-virtualenv@v1
        id: cache-virtualenv
      - uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'

      - run: pip install -r requirements.txt
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'

      - name: make cargo-build/install
        if: ${{ !env.ACT }}
        run: |
          export RUSTUP_INIT_SKIP_PATH_CHECK=yes
          #curl --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/rust-lang/rustup/master/rustup-init.sh | bash
          curl https://sh.rustup.rs -sSf | sh -s -- -y
          source $HOME/.cargo/env
          #make
          make submodules
          #make run
          make cargo-build
          #make cargo-install
